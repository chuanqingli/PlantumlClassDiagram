@startuml

' =========== AbstractTest =========== 
abstract class AbstractTest{ 
    next : AbstractTest
    value : Integer
} 
TestClass<|--AbstractTest
TestInterface<|..AbstractTest
TestInterface2<|..AbstractTest
AbstractTest*..Integer


' =========== Test =========== 
class Test{ 
    next : Test
    next2 : Test2
    value : Integer
    void hello()
} 
TestClass<|--Test
TestInterface<|..Test
TestInterface2<|..Test
Test*..Test2
Test*..Integer

' =========== InnerClass =========== 
class InnerClass{ 
    innerValue : int
} 
InnerClass*..int

Test+--InnerClass

' =========== InnerClass2 =========== 
class InnerClass2{ 
    innerValue : int
} 
InnerClass2*..int

Test+--InnerClass2


' =========== Test2 =========== 
class Test2{ 
    next : Test2
    value : Integer
} 
TestClass<|--Test2
TestInterface<|..Test2
Test2*..Integer


' =========== TestEnum =========== 
enum TestEnum{ 
    A : TestEnum
    B : TestEnum
    C : TestEnum
    D : TestEnum
} 


' =========== TestClass =========== 
class TestClass{ 
} 


' =========== TestInterface =========== 
interface TestInterface{ 
} 


' =========== TestInterface2 =========== 
interface TestInterface2{ 
} 

@enduml
